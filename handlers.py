from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Command
from functools import lru_cache
import text, kb, sqlite3


router = Router()

@router.message(Command("start"))
async def start_handler(msg: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ–Ω—é
    await msg.answer(text.greet .format(name=msg.from_user.full_name), reply_markup=kb.menu)

@router.message(F.text == "admin")
async def admin_handler(msg: Message):
    await msg.answer("–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")

@router.message(Command("players"))
async def players_handler(msg: Message):
    conn = sqlite3.connect('mbr1.db')
    cursor = conn.cursor()
    @lru_cache(maxsize=None)
    def get_player_list():
        cursor.execute("SELECT last_name FROM players")
        return cursor.fetchall()
    player_list = get_player_list()
    cursor.close()
    conn.close()
    buttons = []
    for row in player_list:
        last_name = row[0]
        buttons.append(types.InlineKeyboardButton(text=last_name, callback_data=f"player_{last_name}"))
    columns = 2
    inline_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons[i:i+columns] for i in range(0, len(buttons), columns)])
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞:", reply_markup=inline_keyboard)


@router.callback_query(lambda c: c.data.startswith('player_'))
async def player_callback_handler(query: types.CallbackQuery):
    last_name = query.data.split('_')[1]
    cursor = sqlite3.connect('mbr1.db').cursor()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã player
    cursor.execute("SELECT first_name, birthday FROM players WHERE last_name = ?", (last_name,))
    player_data = cursor.fetchone()
    if player_data is None:
        await query.message.answer("–î–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    first_name, birthday = player_data

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–ª–∞—Ö –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã goal_detail
    cursor.execute(
        "SELECT count(*) FROM goal_details WHERE who_score = (SELECT player_id FROM players WHERE last_name = ?)",
        (last_name,))
    goals_scored = cursor.fetchone()[0]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã match_player
    cursor.execute(
        "SELECT count(*) FROM matches_players WHERE player_id = (SELECT player_id FROM players WHERE last_name = ?)",
        (last_name,))
    match_player = cursor.fetchone()[0]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–¥–∞—á–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã goal_detail
    cursor.execute(
        "SELECT count(*) FROM goal_details WHERE who_assist = (SELECT player_id FROM players WHERE last_name = ?)",
        (last_name,))
    goal_assists = cursor.fetchone()[0]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ—Ä–µ –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã json_mbr
    cursor.execute(
        "SELECT json_extract(data, '$.jersey') FROM json_mbr WHERE player_id = (SELECT player_id FROM players WHERE last_name = ?)",
        (last_name,))
    jersey_number = cursor.fetchone()[0]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã json_mbr
    cursor.execute(
        "SELECT json_extract(data, '$.position') FROM json_mbr WHERE player_id = (SELECT player_id FROM players WHERE last_name = ?)",
        (last_name,))
    position = cursor.fetchone()[0]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã json_mbr
    cursor.execute(
        "SELECT json_extract(data, '$.country') FROM json_mbr WHERE player_id = (SELECT player_id FROM players WHERE last_name = ?)",
        (last_name,))
    country = cursor.fetchone()[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞
    message = f"–î–æ—Å—å–µ –∏–≥—Ä–æ–∫–∞:\n\n"
    message += f"–ò–º—è - {last_name}, {first_name}\n"
    message += f"–ù–æ–º–µ—Ä - {jersey_number} \n"
    message += f"–ü–æ–∑–∏—Ü–∏—è - {position} \n"
    message += f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - {birthday}\n"
    message += f"–°—Ç—Ä–∞–Ω–∞ - {country} \n"
    message += f"–°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π - {match_player} \n"
    message += f"–ì–æ–ª–æ–≤ –∑–∞–±–∏—Ç–æ - {goals_scored}\n"
    message += f"–ì–æ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–¥–∞—á - {goal_assists}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—å–µ –∏–≥—Ä–æ–∫–∞
    await query.message.answer(message)

@router.message(Command("lastm"))
async def lastmatch_handler(msg: Message):
    conn = sqlite3.connect('mbr1.db')
    cursor = conn.cursor()
    @lru_cache(maxsize=None)
    def get_results_list(cursor):
        cursor.execute("SELECT scored, missed, opponent, play_date FROM matches")
        return cursor.fetchall()
    results_list = get_results_list(cursor)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_list_text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(
        f"Marlboro  ( {scored}:{missed} )  {opponent}  -  {play_date}" for scored, missed, opponent, play_date in
        results_list
    )

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    buttons = [
        types.InlineKeyboardButton(text=f"({scored}:{missed}) - {opponent}", callback_data=f"lastm_{play_date}")
        for scored, missed, opponent, play_date in results_list
    ]

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    columns = 2
    inline_keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[buttons[i:i + columns] for i in range(0, len(buttons), columns)]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á:\n\n" + results_list_text, reply_markup=inline_keyboard)

@router.callback_query(lambda c: c.data.startswith('lastm_'))
async def lastm_callback_handler(query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
    match_id = query.data.split('_')[1]

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('mbr1.db')
    cursor = conn.cursor()

    # –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–µ
    cursor.execute("SELECT scored, missed, opponent, play_date, ref FROM matches WHERE play_date = ?", (match_id,))
    result = cursor.fetchone()

    if result:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –º–∞—Ç—á–∞
        scored, missed, opponent, play_date, ref = result
        message = f"–ú–∞—Ç—á Marlboro - {opponent}\n"
        message += f"–°—á—ë—Ç - {scored} : {missed}\n"
        message += f"–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ - \n"
        message += f"–ì–æ–ª—ã –∑–∞–±–∏–ª–∏ - \n"
        message += f"–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á - {ref}\n"
        message += f"–î–∞—Ç–∞ –º–∞—Ç—á–∞: {play_date}\n"
        message += f"–¢—É—Ä–Ω–∏—Ä: - \n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.answer(message)
    else:
        # –ï—Å–ª–∏ –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await query.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

@router.message(Command("results"))
async def results_handler(msg: Message):
    conn = sqlite3.connect('mbr1.db')
    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã matches
    cursor.execute("SELECT count(*) FROM matches")
    matches_played = cursor.fetchone()[0]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã goal_details
    cursor.execute("SELECT count(*) FROM goal_details WHERE who_score != 0")
    goal_scored = cursor.fetchone()[0]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞—Å—Å–∏—Å—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã goal_details
    cursor.execute("SELECT count(*) FROM goal_details WHERE who_assist != 0")
    goal_assists = cursor.fetchone()[0]

    # –¢–∞–∫ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
    cursor.execute("SELECT count(match_id) from matches where scored > missed;")
    match_won = cursor.fetchone()[0]

    # –¢–∞–∫ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
    cursor.execute("SELECT avg(scored) from matches")
    scored_avg = cursor.fetchone()[0]
    scored_avg = round(scored_avg, 2)

    # –¢–∞–∫ –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
    cursor.execute("SELECT avg(missed) from matches")
    missed_avg = cursor.fetchone()[0]
    missed_avg = round(missed_avg, 2)

    cursor.execute('SELECT  who_assist, count(*) FROM goal_details GROUP BY who_assist ORDER BY count(*) DESC limit 3')
    res1 = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥—ã
    message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –§–ö üö¨Marlboroüö¨:\n\n"
    message += f"–ß–∏—Å–ª–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π - {matches_played}\n"
    message += f"–ó–∞–±–∏—Ç–æ –≥–æ–ª–æ–≤ - {goal_scored}\n"
    message += f"–ß–∏—Å–ª–æ –∞—Å—Å–∏—Å—Ç–æ–≤ - {goal_assists}\n"
    message += f"–ú–∞—Ç—á–µ–π –≤—ã–∏–≥—Ä–∞–Ω–æ - {match_won}\n"
    message += f"–ó–∞–±–∏—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –∏–≥—Ä—É - {scored_avg}\n"
    message += f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –∏–≥—Ä—É - {missed_avg}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
    await msg.answer(message)

    cursor.close()
    conn.close()

@router.callback_query(lambda c: c.data == "lastm")
async def lastmatch_callback_handler(query: types.CallbackQuery):
    await lastmatch_handler(query.message)

@router.callback_query(lambda c: c.data == "players")
async def player_callback_handler(query: types.CallbackQuery):
    await players_handler(query.message)

@router.callback_query(lambda c: c.data == "results")
async def results_callback_handler(query: types.CallbackQuery):
    await results_handler(query.message)
